import random
import string
import bcrypt
import crypt
import time
import pandas as pd

N_PASSWD_DATASET = 100

def main():
    t = time.time()
    run_datasets_on(dictionary=string.ascii_lowercase, name="min")
    run_datasets_on(dictionary=string.ascii_uppercase, name="may")
    run_datasets_on(dictionary=string.digits, name="num")
    run_datasets_on(dictionary=string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation, name="alphanumsym")
    print("Finished on :", time.time() - t, " sec")
    

def run_datasets_on(dictionary, name):
    for i in range(3, 8):
        data_set = generate_dataset(len=i, dictionary=dictionary)
        data_set.to_csv(f"passwd_{name}_{i}.csv", header=False, index=False)



"""
passwd = generate_passwd(len, dictionary) # gen new passwd
data = {
    "passwd": passwd,
    "hash": bcrypt.hashpw(bytes(passwd, 'ascii'), bcrypt.gensalt()) # append hashed passwd
}
df = pd.DataFrame(data, index=[0])
for _ in range(N_PASSWD_DATASET - 1):
    passwd = generate_passwd(len, dictionary) # gen new passwd
    new_df = pd.DataFrame({
        "passwd": passwd,
        "hash": bcrypt.hashpw(bytes(passwd, 'ascii'), bcrypt.gensalt()) # append hashed passwd
    }, index=[0])
    df = pd.concat([df, new_df], ignore_index=True)
"""   
def generate_dataset(len:int, dictionary: str):
    pwd_gemerated = 0
    pwds = []
    hashs = []
    hashs_b = []
    while pwd_gemerated < 100:
        pwd = generate_passwd(len, dictionary)
        if pwd not in pwds:
            pwds.append(pwd)
            pwd_gemerated += 1
            hashs.append(crypt.crypt(pwd, crypt.METHOD_SHA512))
            #hashs_b.append(bcrypt.hashpw(bytes(pwd, 'ascii'), bcrypt.gensalt()))
            #hashs_b.append(crypt.crypt(pwd, crypt.METHOD_MD5))
            
    df = pd.DataFrame(hashs, columns=["hash"])
        
    return df
    
def generate_passwd(len:int, dictionary: str):
    # Returns a len sized string generated by randomly picking chars in dictionary
    return  "".join([random.choice(dictionary) for _ in range(len)])


if __name__ == "__main__":
    main()